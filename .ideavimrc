" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

" Source your .vimrc
source ~/.vimrc


"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
set scroll=7
set relativenumber
set incsearch

" Enable which-key plugin
set which-key
set timeoutlen=60000

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
Plug 'machakann/vim-highlightedyank' " Highlight copied text
Plug 'tpope/vim-commentary' " Commentary plugin
Plug 'easymotion/vim-easymotion' " Easy Motions





" -- Custom Hot Keys Below --

" Jump to the end of the line
nnoremap <C-e> $
vnoremap <C-e> $

" Split windows
nmap <C-\> <Action>(SplitVertically)
nmap <C--> <Action>(SplitHorizontally)
nmap <C-=> <Action>(Unsplit)
nmap <C-m> <Action>(MoveEditorToOppositeTabGroup)

" Navigate splits
sethandler <C-Left> a:vim
sethandler <C-Right> a:vim
sethandler <C-Up> a:vim
sethandler <C-Down> a:vim
nnoremap <C-Left> <C-W>h
nnoremap <C-Right> <C-W>l
nnoremap <C-Up> <C-W>k
nnoremap <C-Down> <C-W>j

" Navigate tabs (opened files)
nmap <TAB> :action NextTab<CR>
nmap <A-TAB> :action PreviousTab<CR>

" Forward/Backward navigation
sethandler <C-o> a:vim
sethandler <C-i> a:vim

" Zen mode
nmap <C-z> <Action>(ToggleDistractionFreeMode)

" Toggle Terminal
" map <C-t> <Action>(ActivateTerminalToolWindow)

" system clipboard
" vmap <leader>yiw "+yiw
" nmap <leader>yiw "+yiw
" vmap <leader>y "+y
" vmap <leader>d "_d
" nmap <leader>y "+yy
" nmap <leader>p "+p
" nmap <leader>P "+P
" vmap <leader>p "+p
" vmap <leader>P "+P





" -- Leader commands below --

" Set leader key to be space bar
let mapleader=" "

" Find commands
let g:WhichKeyDesc_find = "<leader>f Find"

nmap <leader>ff <Action>(GotoFile)
let g:WhichKeyDesc_find_file = "<leader>ff Find File"

nmap <leader>fw <Action>(FindInPath)
let g:WhichKeyDesc_find_word = "<leader>fw Find Word"

nmap <leader>fa <Action>(GotoAction)
let g:WhichKeyDesc_find_action = "<leader>fa Find Action"


" Go to commands
let g:WhichKeyDesc_goto = "g Go To"

nmap gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_goto_definition = "gd Go To Definition"

nmap gi <Action>(GotoImplementation)
let g:WhichKeyDesc_goto_implementation = "gi Go To Implementation"

nmap gr <Action>(ShowUsages)
let g:WhichKeyDesc_goto_references = "gr Go To References"


" Jump to commands

let g:WhichKeyDesc_jump_to = "<leader>j Jump To"

nmap <leader>jb <Plug>(easymotion-s)
let g:WhichKeyDesc_jump_to_backwards = "<leader>jb Jump To Backwards"

nmap <leader>jf <Plug>(easymotion-f)
let g:WhichKeyDesc_jump_to_forward = "<leader>jf Jump To Forward"


" Git commands
let g:WhichKeyDesc_git = "<leader>g Git"

nmap <leader>gp <Action>(Vcs.QuickListPopupAction)
let g:WhichKeyDesc_git_popup = "<leader>gp Git Popup"

nmap <leader>gd <Action>(Compare.SameVersion)
let g:WhichKeyDesc_git_diff = "<leader>gd Git Diff"

nmap <leader>gr <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_git_reset = "<leader>gr Git Reset"


" Close commands
let g:WhichKeyDesc_close = "<leader>x Close"

nmap <leader>xn <Action>(CloseAllNotifications)
let g:WhichKeyDesc_close_notifications = "<leader>xn Close Notifications"


" LSP commands
let g:WhichKeyDesc_lsp = "<leader>l LSP"

nmap <leader>ld <Action>(ShowErrorDescription)
let g:WhichKeyDesc_lsp_show_error = "<leader>ld Show Error"

nmap <leader>lD <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_lsp_show_all_errors = "<leader>lD Show All Errors"


